
// This is an autogenerated file from Firebase Studio.
'use server';

/**
 * @fileOverview Predicts whether a code solution will pass the test cases for a coding challenge.
 *
 * - predictCodeSolutionOutcome - A function that handles the prediction process.
 * - PredictCodeSolutionOutcomeInput - The input type for the predictCodeSolutionOutcome function.
 * - PredictCodeSolutionOutcomeOutput - The return type for the predictCodeSolutionOutcome function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

const PredictCodeSolutionOutcomeInputSchema = z.object({
  code: z.string().describe('The code solution to be evaluated.'),
  testCases: z.string().describe('The test cases for the coding challenge.'),
  language: z.string().describe('The programming language of the code solution.'),
  challengeDescription: z.string().describe('The description of the coding challenge.'),
});
export type PredictCodeSolutionOutcomeInput = z.infer<
  typeof PredictCodeSolutionOutcomeInputSchema
>;

const PredictCodeSolutionOutcomeOutputSchema = z.object({
  willPass: z
    .boolean()
    .describe('Whether the code solution is predicted to pass the test cases.'),
  reasoning: z
    .string()
    .describe('The reasoning behind the prediction, including potential issues.'),
});
export type PredictCodeSolutionOutcomeOutput = z.infer<
  typeof PredictCodeSolutionOutcomeOutputSchema
>;

export async function predictCodeSolutionOutcome(
  input: PredictCodeSolutionOutcomeInput
): Promise<PredictCodeSolutionOutcomeOutput> {
  return predictCodeSolutionOutcomeFlow(input);
}

const prompt = ai.definePrompt({
  name: 'predictCodeSolutionOutcomePrompt',
  input: {schema: PredictCodeSolutionOutcomeInputSchema},
  output: {schema: PredictCodeSolutionOutcomeOutputSchema},
  prompt: `You are an AI expert in evaluating code solutions for coding challenges.

You are given a code solution, a set of test cases, the programming language, and a description of the coding challenge.

Your task is to predict whether the code solution will pass all the test cases.

Provide a boolean value for 'willPass' and provide detailed reasoning for your prediction, including potential issues.

Code Solution:
\`\`\`{{{language}}}
{{{code}}}
\`\`\`

Test Cases:
{{{testCases}}}

Challenge Description:
{{{challengeDescription}}}

Consider edge cases, potential bugs, and adherence to best practices.

Ensure your reasoning is clear, concise, and well-justified.
`,
});

const predictCodeSolutionOutcomeFlow = ai.defineFlow(
  {
    name: 'predictCodeSolutionOutcomeFlow',
    inputSchema: PredictCodeSolutionOutcomeInputSchema,
    outputSchema: PredictCodeSolutionOutcomeOutputSchema,
  },
  async input => {
    const {output} = await prompt(input);
    return output!;
  }
);
